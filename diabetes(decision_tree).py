# -*- coding: utf-8 -*-
"""Diabetes(decision_tree).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16f_k9I_jZkw05FECTwm9v-ukqx5KZYei
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import pandas as pd
import seaborn as sns

path='/content/diabetes.csv'
data=pd.read_csv(path)
data.head()

x= data[['Pregnancies',	'Glucose',	'BloodPressure',	'SkinThickness',	'Insulin',	'BMI',	'DiabetesPedigreeFunction',	'Age']].values
y= data['Outcome'].values

#train test split
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.2,random_state=0)
print(x_train)
print(x_test)

from sklearn.tree import DecisionTreeClassifier,export_text,plot_tree
clf=clf=DecisionTreeClassifier()
clf.fit(x_train,y_train)
print(clf.score(x_train,y_train))
print(clf.score(x_test,y_test))
y_pred=clf.predict(x_test)
plt.figure(figsize=(10, 6))
# Assuming 'diabetes_features' contains the original feature names:
diabetes_features = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']
plot_tree( clf,feature_names=diabetes_features, class_names=['Non-Diabetic', 'Diabetic'], filled=True)
plt.title("Decision Tree Visualization")
plt.show()

from sklearn.model_selection import GridSearchCV
param_grid={
    'max_depth': [3, 4, 5, 6],
    'criterion': ['gini', 'entropy'],
    'min_samples_split': [2, 5, 10]


}
grid_search = GridSearchCV(DecisionTreeClassifier(random_state=42), param_grid, cv=5, scoring='accuracy')
grid_search.fit(x_train, y_train)
print("\nBest Parameters from Grid Search:", grid_search.best_params_)

#prediction
y_pred=clf.predict(x_test)

from sklearn import metrics
cnf_matrix = metrics.confusion_matrix(y_test,y_pred)
print(cnf_matrix)
plt.figure(figsize=(6, 4))
sns.heatmap(cnf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Non-Diabetic', 'Diabetic'], yticklabels=['Non-Diabetic', 'Diabetic'])
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

from sklearn.metrics import accuracy_score,classification_report
print("Accuracy:",metrics.accuracy_score(y_test,y_pred))
print(classification_report(y_pred,y_test))